Provisionar uma infraestrutura na AWS com **Terraform** (ferramenta de IaC – Infrastructure as Code) envolve alguns passos bem definidos. Vou estruturar este guia em um passo a passo detalhado para que você consiga configurar e provisionar sua infraestrutura AWS usando o **Terraform do zero**.
## Passo 1: Configurar o Ambiente Local com Terraform
Antes de iniciar o provisionamento:
1. **Instale o Terraform:**
    - Acesse o site oficial: [https://www.terraform.io/downloads](https://www.terraform.io/downloads)
    - Escolha a versão correspondente ao seu SO.
    - Após instalar, verifique se está funcionando usando o comando:
``` sh
     terraform version
```
1. **Configure o AWS CLI:**
    - Instale o AWS CLI: [Documentação Oficial](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html).
    - Configure credenciais para conectar com sua conta AWS:
``` sh
     aws configure
```
Insira:
- **AWS Access Key ID:**
- **AWS Secret Access Key:**
- **Default region (exemplo:** `us-east-1`) e saída (geralmente `json`).

## Passo 2: Criar o Arquivo de Configuração Terraform
O Terraform define toda a infraestrutura em arquivos `.tf`. Crie uma estrutura básica de arquivos:
1. **Crie o diretório do projeto Terraform:**
``` sh
   mkdir terraform-aws-provision && cd terraform-aws-provision
```
1. **Crie os arquivos básicos:**
    - `main.tf`: Define os recursos da infraestrutura.
    - `variables.tf`: Declara as variáveis que serão usadas na infraestrutura.
    - `outputs.tf`: Configura o que será exibido ao final do provisionamento.

## Passo 3: Escrever o Arquivo `main.tf`
**1. Provider AWS:**
No `main.tf`, você precisará configurar o **provider AWS** (necessário para que o Terraform saiba interagir com seus recursos AWS):
``` hcl
provider "aws" {
  region = "us-east-1" # Escolha sua região padrão
}
```
**2. Criar uma VPC:**
Adicione o código para provisionar uma VPC com CIDR (bloco IPs):
``` hcl
resource "aws_vpc" "main_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "MainVPC"
  }
}
```
**3. Configurar Subnets:**
Configure subnets públicas e privadas dentro da VPC:
``` hcl
resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-east-1a"
  map_public_ip_on_launch = true
  tags = {
    Name = "PublicSubnet"
  }
}
resource "aws_subnet" "private_subnet" {
  vpc_id            = aws_vpc.main_vpc.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "PrivateSubnet"
  }
}
```
**4. Criar um Gateway de Internet e Rotas:**
Adicione um gateway de internet para conexões externas:
``` hcl
resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = aws_vpc.main_vpc.id
  tags = {
    Name = "InternetGateway"
  }
}

resource "aws_route_table" "public_routes" {
  vpc_id = aws_vpc.main_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.internet_gateway.id
  }
  tags = {
    Name = "PublicRoutes"
  }
}

resource "aws_route_table_association" "route_association" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_routes.id
}
```
**5. Criar um Servidor EC2:**
Crie uma instância EC2 para iniciar um servidor Linux:
``` hcl
resource "aws_instance" "example_instance" {
  ami           = "ami-0c02fb55956c7d316" # Amazon Linux 2 AMI
  instance_type = "t2.micro"
  
  subnet_id     = aws_subnet.public_subnet.id

  tags = {
    Name = "ExampleEC2"
  }
}
```
## Passo 4: Configurar Variáveis (`variables.tf`)
Declare variáveis reutilizáveis no arquivo `variables.tf`:
``` hcl
variable "region" {
  default = "us-east-1"
}

variable "vpc_cidr" {
  default = "10.0.0.0/16"
}
```
No `main.tf`, substitua valores fixos pelas variáveis declaradas, por exemplo:
``` hcl
provider "aws" {
  region = var.region
}

resource "aws_vpc" "main_vpc" {
  cidr_block = var.vpc_cidr
  # Resto é semelhante
}
```
## Passo 5: Configurar Saída (`outputs.tf`)
Adicione saídas para exibir informações úteis após o provisionamento:
``` hcl
output "vpc_id" {
  value = aws_vpc.main_vpc.id
}

output "ec2_public_ip" {
  value = aws_instance.example_instance.public_ip
}
```
## Passo 6: Executar o Terraform
Agora, inicialize e aplique o Terraform:
1. **Inicialize o Terraform no projeto:**
``` sh
   terraform init
```
Esse comando prepara o Terraform para rodar (baixa os providers, como `aws`).
1. **Valide a configuração:**
``` sh
   terraform validate
```
1. **Verifique o que será criado com o plano de execução:**
``` sh
   terraform plan
```
1. **Aplique o plano e provisiona a infraestrutura:**
``` sh
   terraform apply
```
- Confirme com `yes` para inicializar o provisionamento.

## Passo 7: Verificar e Limpar Infra-estrutura
1. **Verifique os recursos na AWS:** Após rodar o comando `terraform apply`, entre no console AWS para validar os recursos criados.
2. **Deletar a infraestrutura:**
Se quiser destruir os recursos AWS criados pelo Terraform:
``` sh
   terraform destroy
```
Confirme com `yes`.
## Mais Personalizações
1. **Adicionar Permissões e Segurança:**
    - Use Security Groups para controlar acesso às instâncias EC2:
``` hcl
     resource "aws_security_group" "allow_ssh" {
       vpc_id = aws_vpc.main_vpc.id

       ingress {
         from_port   = 22
         to_port     = 22
         protocol    = "tcp"
         cidr_blocks = ["0.0.0.0/0"]
       }

       egress {
         from_port   = 0
         to_port     = 0
         protocol    = "-1"
         cidr_blocks = ["0.0.0.0/0"]
       }

       tags = {
         Name = "AllowSSH"
       }
     }
```
1. **Armazenar estados no backend:** Configure o armazenamento de estado no S3 para ambientes compartilhados.
Exemplo no `main.tf`:
``` hcl
   terraform {
     backend "s3" {
       bucket         = "meu-terraform-state-bucket"
       key            = "terraform.tfstate"
       region         = "us-east-1"
     }
   }
```
Este guia configura uma infraestrutura básica na AWS com **VPC, Subnets e uma instância EC2** usando **Terraform**. Se precisar adaptar sua aplicação, posso ajudar a enriquecer o script para incluir outros serviços como banco de dados (RDS), ECS, S3 e balanceadores de carga (ALB).
